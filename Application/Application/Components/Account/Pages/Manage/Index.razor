@page "/Account/Manage"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore

@inject UserManager<ApplicationUser> UserManager
@inject SignInManager<ApplicationUser> SignInManager
@inject IdentityUserAccessor UserAccessor
@inject IdentityRedirectManager RedirectManager
@inject ApplicationDbContext DbContext

<PageTitle>Profile</PageTitle>

<RenderLocation />

<h3>Profile</h3>
<StatusMessage />

<div class="row">
	<div class="col-md-6">
		<EditForm Model="Input" FormName="profile" OnValidSubmit="OnValidSubmitAsync" method="post">
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" role="alert" />
			<div class="form-floating mb-3">
				<input type="text" value="@username" class="form-control" placeholder="Please choose your username." disabled />
				<label for="username" class="form-label">Username</label>
			</div>
			<div class="form-floating mb-3">
				<InputText @bind-Value="Input.PhoneNumber" class="form-control" placeholder="Please enter your phone number." />
				<label for="phone-number" class="form-label">Phone number</label>
				<ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
			</div>
			<div class="form-floating mb-3">
				<InputSelect @bind-Value="Input.TimeZoneId" class="form-control">
					<option value="">(not set)</option>
					@foreach (var item in allTimeZones)
					{
						<option value="@item.Id">@item.DisplayName</option>
					}
				</InputSelect>
				<label for="time-zone" class="form-label">Time zone</label>
			</div>
			<button type="submit" class="w-100 btn btn-lg btn-primary">Save</button>
		</EditForm>
	</div>
</div>

@code {
	private ApplicationUser user = default!;
	private string? username;
	private string? phoneNumber;
	private string? timeZoneId;
	private IEnumerable<TimeZoneInfo> allTimeZones = [];

	[CascadingParameter]
	private HttpContext HttpContext { get; set; } = default!;

	[SupplyParameterFromForm]
	private InputModel Input { get; set; } = new();

	protected override async Task OnInitializedAsync()
	{
		allTimeZones = TimeZoneInfo.GetSystemTimeZones();

		user = await UserAccessor.GetRequiredUserAsync(HttpContext);
		username = await UserManager.GetUserNameAsync(user);
		phoneNumber = await UserManager.GetPhoneNumberAsync(user);
		timeZoneId = user.TimeZoneId;

		Input.PhoneNumber ??= phoneNumber;
		Input.TimeZoneId ??= timeZoneId;
	}

	private async Task OnValidSubmitAsync()
	{
		if (Input.PhoneNumber != phoneNumber)
		{
			var setPhoneResult = await UserManager.SetPhoneNumberAsync(user, Input.PhoneNumber);
			if (!setPhoneResult.Succeeded)
			{
				RedirectManager.RedirectToCurrentPageWithStatus("Error: Failed to set phone number.", HttpContext);
			}
		}

		if (Input.TimeZoneId != timeZoneId)
		{
			await DbContext.Users
				.Where(u => u.UserName == user.UserName)
				.ExecuteUpdateAsync(set => set.SetProperty(u => u.TimeZoneId, Input.TimeZoneId));
		}

		await SignInManager.RefreshSignInAsync(user);
		RedirectManager.RedirectToCurrentPageWithStatus("Your profile has been updated", HttpContext);
	}

	private sealed class InputModel
	{
		[Phone]
		[Display(Name = "Phone number")]
		public string? PhoneNumber { get; set; }

		[Display(Name = "Time Zone")]
		public string? TimeZoneId { get; set; }
	}
}
